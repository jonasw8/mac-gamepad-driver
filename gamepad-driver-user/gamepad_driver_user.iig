//
//  gamepad_driver_user.iig
//  gamepad-driver-user
//
//  Created by Noah NÃ¼bling on 30.08.23.
//

#ifndef gamepad_driver_user_h
#define gamepad_driver_user_h

#include <Availability.h>
#include <DriverKit/DriverKit.iig>
#include <USBDriverKit/IOUSBHostPipe.iig>
#include <USBDriverKit/IOUSBHostDevice.iig>

class gamepad_driver_user: public IOService {
    
public:
    
    /// IOService Lifecycle
    virtual bool init(void) override;
    virtual void free(void) override;
    virtual kern_return_t Start(IOService *provider) override;
    virtual kern_return_t Stop(IOService *provider) override;
    
    /// Read & Write
    bool QueueRead(void) LOCALONLY;
    bool QueueWrite(const void *bytes, uint32_t length) LOCALONLY;
    
    virtual void ReadComplete(OSAction *action, IOReturn status, uint32_t actualByteCount, uint64_t completionTimestamp) TYPE(IOUSBHostPipe::CompleteAsyncIO);
    virtual void WriteComplete(OSAction *action, IOReturn status, uint32_t actualByteCount, uint64_t completionTimestamp) TYPE(IOUSBHostPipe::CompleteAsyncIO);
    
    /// Other interface for client
    virtual kern_return_t CoolGetProvider(IOUSBHostDevice **provider);
    
private:
    /// Attach/detach IOHIDDevice client
    virtual void PadConnect(void) LOCALONLY;
    virtual void PadDisconnect(void) LOCALONLY;
    
        
};

#endif /* gamepad_driver_user_h */
